-- MySQL Script generated by MySQL Workbench
-- Mon Aug 31 01:07:19 2020
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mom_and_pop
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `mom_and_pop` ;

-- -----------------------------------------------------
-- Schema mom_and_pop
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mom_and_pop` DEFAULT CHARACTER SET utf8 ;
USE `mom_and_pop` ;

-- -----------------------------------------------------
-- Table `mom_and_pop`.`user`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mom_and_pop`.`user` ;

CREATE TABLE IF NOT EXISTS `mom_and_pop`.`user` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `identifier` VARCHAR(20) NOT NULL,
  `name` VARCHAR(200) NOT NULL,
  `email` VARCHAR(200) NOT NULL,
  `password` VARCHAR(50) NOT NULL,
  `type` VARCHAR(20) NOT NULL,
  `imagem_profile` VARCHAR(500) NULL,
  `cel_phone` VARCHAR(20) NULL,
  `landline` VARCHAR(20) NULL,
  `terms_type` VARCHAR(45) NULL,
  `date_confirmation_terms` DATETIME NULL,
  `confirmation_terms_version` VARCHAR(45) NULL,
  `under_analysis` TINYINT NOT NULL DEFAULT 1,
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `enabled` TINYINT NOT NULL DEFAULT 1,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `idx_user_id_unique` ON `mom_and_pop`.`user` (`id` ASC) VISIBLE;

CREATE UNIQUE INDEX `idx_user_identifier_unique` ON `mom_and_pop`.`user` (`identifier` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `mom_and_pop`.`oauth_client`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mom_and_pop`.`oauth_client` ;

CREATE TABLE IF NOT EXISTS `mom_and_pop`.`oauth_client` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `oauth_client_id` VARCHAR(45) NOT NULL,
  `oauth_client_secret` VARCHAR(255) NOT NULL,
  `redirect_uris` VARCHAR(900) NOT NULL,
  `grants` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `idx_id_unique` ON `mom_and_pop`.`oauth_client` (`id` ASC) VISIBLE;

CREATE UNIQUE INDEX `idx_oauth_client_id_unique` ON `mom_and_pop`.`oauth_client` (`oauth_client_id` ASC) VISIBLE;

CREATE UNIQUE INDEX `idx_oauth_client_secret_unique` ON `mom_and_pop`.`oauth_client` (`oauth_client_secret` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `mom_and_pop`.`token`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mom_and_pop`.`token` ;

CREATE TABLE IF NOT EXISTS `mom_and_pop`.`token` (
  `access_token` VARCHAR(1000) NOT NULL,
  `access_token_expires_at` DATETIME NOT NULL,
  `refresh_token` VARCHAR(255) NOT NULL,
  `refresh_token_Expires_at` DATETIME NOT NULL,
  `oauth_client_id` INT UNSIGNED NOT NULL,
  `user_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`access_token`),
  CONSTRAINT `fk_token_oauth_client`
    FOREIGN KEY (`oauth_client_id`)
    REFERENCES `mom_and_pop`.`oauth_client` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_token_user`
    FOREIGN KEY (`user_id`)
    REFERENCES `mom_and_pop`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `idx_fk_token_oauth_client` ON `mom_and_pop`.`token` (`oauth_client_id` ASC) VISIBLE;

CREATE INDEX `idx_fk_token_user` ON `mom_and_pop`.`token` (`user_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `mom_and_pop`.`user_session`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mom_and_pop`.`user_session` ;

CREATE TABLE IF NOT EXISTS `mom_and_pop`.`user_session` (
  `id` BIGINT(20) UNSIGNED NOT NULL,
  `user_id` INT UNSIGNED NOT NULL,
  `push_token` VARCHAR(200) NULL,
  `is_bot` TINYINT NOT NULL DEFAULT 0,
  `is_desktop` TINYINT NOT NULL DEFAULT 0,
  `is_mobile` TINYINT NOT NULL DEFAULT 0,
  `ip_address` VARCHAR(25) NOT NULL,
  `platform` VARCHAR(150) NULL,
  `browser` VARCHAR(150) NULL,
  `version` VARCHAR(50) NULL,
  `os` VARCHAR(50) NULL,
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `last_session_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `token_access_token` VARCHAR(1000) NOT NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_user_session_user`
    FOREIGN KEY (`user_id`)
    REFERENCES `mom_and_pop`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_user_session_token`
    FOREIGN KEY (`token_access_token`)
    REFERENCES `mom_and_pop`.`token` (`access_token`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE UNIQUE INDEX `idx_user_session_id_unique` ON `mom_and_pop`.`user_session` (`id` ASC) VISIBLE;

CREATE INDEX `idx_fk_user_session_user` ON `mom_and_pop`.`user_session` (`user_id` ASC) VISIBLE;

CREATE INDEX `idx_fk_user_session_token` ON `mom_and_pop`.`user_session` (`token_access_token` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `mom_and_pop`.`client`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mom_and_pop`.`client` ;

CREATE TABLE IF NOT EXISTS `mom_and_pop`.`client` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `user_id` INT UNSIGNED NOT NULL,
  `facebook_profile` VARCHAR(500) NULL,
  `facebook_token` VARCHAR(900) NULL,
  `twitter_profile` VARCHAR(500) NULL,
  `twitter_token` VARCHAR(900) NULL,
  `receive_promotions` TINYINT NOT NULL DEFAULT 0,
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_client_user`
    FOREIGN KEY (`user_id`)
    REFERENCES `mom_and_pop`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE UNIQUE INDEX `idx_client_id_unique` ON `mom_and_pop`.`client` (`id` ASC) VISIBLE;

CREATE INDEX `idx_fk_client_user` ON `mom_and_pop`.`client` (`user_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `mom_and_pop`.`weekly_working_time`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mom_and_pop`.`weekly_working_time` ;

CREATE TABLE IF NOT EXISTS `mom_and_pop`.`weekly_working_time` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Identificador da tabela que guardara os dias da semana que a empresa e o entregador estaram disponíveis para trabalhar',
  `holiday_start` TIME NOT NULL COMMENT 'Tempo inicial de trabalho no final de semana',
  `holiday_end` TIME NOT NULL COMMENT 'Tempo final de trabalho no feriado',
  `sunday_start` TIME NOT NULL COMMENT 'Tempo inicial de trabalho no domingo',
  `sunday_end` TIME NOT NULL COMMENT 'Tempo final de trabalho no domingo',
  `monday_start` TIME NOT NULL COMMENT 'Tempo inicial de trabalho na segunda',
  `monday_end` TIME NOT NULL COMMENT 'Tempo final de trabalho na segunda',
  `tuesday_start` TIME NOT NULL COMMENT 'Tempo inicial de trabalho na terça',
  `tuesday_end` TIME NOT NULL COMMENT 'Tempo final de trabalho na terça',
  `wednesday_start` TIME NOT NULL COMMENT 'Tempo inicial de trabalho na quarta',
  `wednesday_end` TIME NOT NULL COMMENT 'Tempo final de trabalho na quarta',
  `thursday_start` TIME NOT NULL COMMENT 'Tempo inicial de trabalho na quinta',
  `thursday_end` TIME NOT NULL COMMENT 'Tempo final de trabalho na quinta',
  `friday_start` TIME NOT NULL COMMENT 'Tempo inicial de trabalho na sexta',
  `friday_end` TIME NOT NULL COMMENT 'Tempo final de trabalho na sexta',
  `saturday_start` TIME NOT NULL COMMENT 'Tempo inicial de trabalho no sábado',
  `saturday_end` TIME NOT NULL COMMENT 'Tempo final de trabalho no sábado',
  PRIMARY KEY (`id`))
ENGINE = InnoDB
COMMENT = 'Tabela responsável por guardar informações informações de horários para os entregadores e para os supermercados';

CREATE UNIQUE INDEX `idx_weekly_working_time_id_unique` ON `mom_and_pop`.`weekly_working_time` (`id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `mom_and_pop`.`country`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mom_and_pop`.`country` ;

CREATE TABLE IF NOT EXISTS `mom_and_pop`.`country` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Id unico da tabela pais',
  `code_fips` VARCHAR(2) NOT NULL COMMENT 'Um código de país primário FIPS 10-4 de dois caracteres alfabéticos que identifica exclusivamente uma entidade geopolítica (países, dependências e áreas de soberania especial)',
  `code_iso` VARCHAR(2) NOT NULL COMMENT 'Um código de país primário ISO 3166 de dois caracteres alfabéticos que identifica exclusivamente uma entidade geopolítica (países, dependências e áreas de soberania especial).',
  `name` VARCHAR(150) NOT NULL COMMENT 'Nome completo do Pais.',
  PRIMARY KEY (`id`))
ENGINE = InnoDB
COMMENT = 'Tabela de países';

CREATE UNIQUE INDEX `idx_country_id_unique` ON `mom_and_pop`.`country` (`id` ASC) VISIBLE;

CREATE UNIQUE INDEX `idx_country_cc_iso_unique` ON `mom_and_pop`.`country` (`code_iso` ASC) VISIBLE;

CREATE UNIQUE INDEX `idx_country_cc_fips_inique` ON `mom_and_pop`.`country` (`code_fips` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `mom_and_pop`.`state`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mom_and_pop`.`state` ;

CREATE TABLE IF NOT EXISTS `mom_and_pop`.`state` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Identificador do estado',
  `country_id` INT UNSIGNED NOT NULL COMMENT 'Fk da tabela de pais',
  `state_code` VARCHAR(5) NULL COMMENT 'Código do estado',
  `name` VARCHAR(100) NOT NULL COMMENT 'Nome do estado',
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_states_country`
    FOREIGN KEY (`country_id`)
    REFERENCES `mom_and_pop`.`country` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Tabela de estados associados ao país';

CREATE UNIQUE INDEX `idx_state_id_unique` ON `mom_and_pop`.`state` (`id` ASC) VISIBLE;

CREATE INDEX `idx_fk_state_country` ON `mom_and_pop`.`state` (`country_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `mom_and_pop`.`city`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mom_and_pop`.`city` ;

CREATE TABLE IF NOT EXISTS `mom_and_pop`.`city` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Identificador da cidade',
  `state_id` INT UNSIGNED NOT NULL COMMENT 'Fk da tabela estado',
  `name` VARCHAR(100) NOT NULL COMMENT 'Nome da cidade',
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_citys_state`
    FOREIGN KEY (`state_id`)
    REFERENCES `mom_and_pop`.`state` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Tabela de cidades associados ao estado';

CREATE UNIQUE INDEX `idx_city_id_unique` ON `mom_and_pop`.`city` (`id` ASC) VISIBLE;

CREATE INDEX `idx_fk_city_state` ON `mom_and_pop`.`city` (`state_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `mom_and_pop`.`neighborhood`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mom_and_pop`.`neighborhood` ;

CREATE TABLE IF NOT EXISTS `mom_and_pop`.`neighborhood` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Identificador do bairro',
  `city_id` INT UNSIGNED NOT NULL COMMENT 'Fk da tabela cidade',
  `name` VARCHAR(100) NOT NULL COMMENT 'Nome do bairro',
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_neighborhoods_city`
    FOREIGN KEY (`city_id`)
    REFERENCES `mom_and_pop`.`city` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Tabela de bairros associados a cidade';

CREATE UNIQUE INDEX `idx_neighborhood_id_unique` ON `mom_and_pop`.`neighborhood` (`id` ASC) VISIBLE;

CREATE INDEX `idx_fk_neighborhood_city` ON `mom_and_pop`.`neighborhood` (`city_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `mom_and_pop`.`address`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mom_and_pop`.`address` ;

CREATE TABLE IF NOT EXISTS `mom_and_pop`.`address` (
  `id` BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Identificador do endereço',
  `neighborhood_id` INT UNSIGNED NOT NULL COMMENT 'Fk da tabela bairro',
  `zip_code` INT NOT NULL COMMENT 'CEP do endereço',
  `name` VARCHAR(150) NOT NULL COMMENT 'Nome da rua / av / logradouro….',
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_addresses_neighborhood`
    FOREIGN KEY (`neighborhood_id`)
    REFERENCES `mom_and_pop`.`neighborhood` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Tabela de endereços associados ao bairro';

CREATE UNIQUE INDEX `idx_address_id_unique` ON `mom_and_pop`.`address` (`id` ASC) VISIBLE;

CREATE INDEX `idx_fk_address_neighborhood` ON `mom_and_pop`.`address` (`neighborhood_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `mom_and_pop`.`address_location`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mom_and_pop`.`address_location` ;

CREATE TABLE IF NOT EXISTS `mom_and_pop`.`address_location` (
  `id` BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `address_id` BIGINT(20) UNSIGNED NOT NULL COMMENT 'Fk da tabela endereço ',
  `complement` VARCHAR(150) NULL COMMENT 'Complemento do endereço',
  `number` INT NULL COMMENT 'Numero do endereço',
  `location` POINT NOT NULL COMMENT 'Geolocalização do endereço ',
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_address_locations_address`
    FOREIGN KEY (`address_id`)
    REFERENCES `mom_and_pop`.`address` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Tabela de localização associada ao endereço do usuário';

CREATE UNIQUE INDEX `idx_address_location_id_unique` ON `mom_and_pop`.`address_location` (`id` ASC) VISIBLE;

CREATE INDEX `idx_fk_address_location_address` ON `mom_and_pop`.`address_location` (`address_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `mom_and_pop`.`reimbursement_method`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mom_and_pop`.`reimbursement_method` ;

CREATE TABLE IF NOT EXISTS `mom_and_pop`.`reimbursement_method` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `payee_name` VARCHAR(200) NOT NULL COMMENT 'Nome da pessoa ou empresa que representa a conta utilizada para o deposito referente aos pagamentos',
  `identifier` VARCHAR(20) NOT NULL COMMENT 'CPF ou CNPJ da conta utilizada para o deposito',
  `bank_account` VARCHAR(40) NOT NULL COMMENT 'Numero da conta utilizada para o deposito',
  `bank_number` INT NOT NULL COMMENT 'Numero do banco utilizado para o deposito',
  `bank_name` VARCHAR(200) NULL COMMENT 'Nome do banco utilizado para o deposito',
  `bank_agency_number` INT NOT NULL COMMENT 'Numero da agencia utilizada para o deposito',
  PRIMARY KEY (`id`))
ENGINE = InnoDB
COMMENT = 'Tabela responsável por salvar a conta bancaria do supermercado e entregar para que possa ser repassado o dinheiro pago pelo cliente';

CREATE UNIQUE INDEX `idx_reimbursement_method_id_unique` ON `mom_and_pop`.`reimbursement_method` (`id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `mom_and_pop`.`market`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mom_and_pop`.`market` ;

CREATE TABLE IF NOT EXISTS `mom_and_pop`.`market` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `parent_id` INT UNSIGNED NOT NULL COMMENT 'FK que representa a matriz, caso seja null esse registro será a matriz, caso tenha um valor significa que este registro é de uma filial',
  `weekly_working_time_id` INT UNSIGNED NOT NULL COMMENT 'Dias da semana que o mercado abre',
  `address_location_id` BIGINT(20) UNSIGNED NOT NULL COMMENT 'Fk que representa o endereço do mercado',
  `reimbursement_method_id` INT UNSIGNED NOT NULL COMMENT 'Fk dos dados bancários para efetuar o pagamento recebido pelo cliente',
  `time_collect_orders` INT UNSIGNED NOT NULL COMMENT 'Horário disponível para que o entregador possa pegar o pedido que foi agendado.',
  `logo_url` VARCHAR(500) NULL COMMENT 'Url da imagem logo da empresa',
  `company_name` VARCHAR(255) NOT NULL COMMENT 'Nome do supermercado',
  `state_registration` VARCHAR(45) NOT NULL COMMENT 'Inscrição estadual da empresa',
  `identifier` VARCHAR(30) NOT NULL COMMENT 'CNPJ da empresa para empresas no Brasil para outros países sera o que identifica como uma empresa',
  `billing` DECIMAL(11,2) NOT NULL COMMENT 'Faturamento da Empresa	',
  `responsible_registration` VARCHAR(255) NOT NULL COMMENT 'Informação da pessoa que fez o cadastro da Empresa em nosso site',
  `responsible_registration_email` VARCHAR(255) NOT NULL COMMENT 'Email do responsável pelo cadastro da empresa no nosso sistema',
  `responsible_registration_phone` VARCHAR(22) NOT NULL COMMENT 'Telefone do responsável pelo cadastro da empresa no nosso sistema',
  `enabled` TINYINT NOT NULL DEFAULT 0 COMMENT 'Define se a empresa esta ativa ou não',
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_market_parent_market`
    FOREIGN KEY (`parent_id`)
    REFERENCES `mom_and_pop`.`market` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_market_weekly_working_time`
    FOREIGN KEY (`weekly_working_time_id`)
    REFERENCES `mom_and_pop`.`weekly_working_time` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_market_address_location`
    FOREIGN KEY (`address_location_id`)
    REFERENCES `mom_and_pop`.`address_location` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_market_reimbursement_method`
    FOREIGN KEY (`reimbursement_method_id`)
    REFERENCES `mom_and_pop`.`reimbursement_method` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_market_time_collect_orders_weekly_working_time`
    FOREIGN KEY (`time_collect_orders`)
    REFERENCES `mom_and_pop`.`weekly_working_time` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Tabela que guardara as informações do supermercado.';

CREATE UNIQUE INDEX `idx_market_id_unique` ON `mom_and_pop`.`market` (`id` ASC) VISIBLE;

CREATE INDEX `idx_fk_market_market` ON `mom_and_pop`.`market` (`parent_id` ASC) VISIBLE;

CREATE INDEX `idx_fk_market_weekly_working_time` ON `mom_and_pop`.`market` (`weekly_working_time_id` ASC) VISIBLE;

CREATE INDEX `idx_fk_market_address_location` ON `mom_and_pop`.`market` (`address_location_id` ASC) VISIBLE;

CREATE INDEX `idx_fk_market_reimbursement_method` ON `mom_and_pop`.`market` (`reimbursement_method_id` ASC) VISIBLE;

CREATE INDEX `idx_fk_market_time_collect_orders_weekly_working_time` ON `mom_and_pop`.`market` (`time_collect_orders` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `mom_and_pop`.`delivery_man_registration`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mom_and_pop`.`delivery_man_registration` ;

CREATE TABLE IF NOT EXISTS `mom_and_pop`.`delivery_man_registration` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `drivers_father_name` VARCHAR(200) NULL COMMENT 'Nome do pai do motorista',
  `drivers_mother_name` VARCHAR(200) NULL COMMENT 'Nome da mãe do motorista',
  `drivers_wife_name` VARCHAR(200) NULL COMMENT 'Nome da esposa do motorista',
  `number_of_children` INT NULL COMMENT 'Numero de filhos que o motorista possui',
  `childrens_age` VARCHAR(45) NULL COMMENT 'Idade dos filhos do motorista',
  `identity` VARCHAR(20) NULL COMMENT 'Identificação do motorista no Brasil é usado o CPF',
  `drivers_license_type` VARCHAR(2) NULL COMMENT 'tipo de carteira de motorista',
  `drivers_license_number` INT NULL COMMENT 'Para o Brasil é utilizado o numero de registro da CNH',
  `registered_another_application` TINYINT NULL COMMENT 'Indica se o motorista trabalha em outro app de entrega',
  `registered_another_application_name` VARCHAR(200) NULL COMMENT 'Nome da aplicação na qual o motorista esta cadastrado',
  `business_information_persons_name` VARCHAR(200) NULL COMMENT 'nome da pessoa para informação comercial',
  `establishment_name` VARCHAR(200) NULL COMMENT 'Nome do estabelecimento comercial do entregador',
  `contact_person_name` VARCHAR(200) NOT NULL COMMENT 'Nome da pessoa para contato',
  `contact_phone_1` VARCHAR(20) NOT NULL COMMENT 'Numero de telefone 1 para contato',
  `contact_phone_2` VARCHAR(20) NULL COMMENT 'Numero de telefone 2 para contato',
  PRIMARY KEY (`id`))
ENGINE = InnoDB
COMMENT = 'Guarda informações referentes ao motorista';

CREATE UNIQUE INDEX `idx_delivery_man_registration_id_unique` ON `mom_and_pop`.`delivery_man_registration` (`id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `mom_and_pop`.`delivery_vehicle`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mom_and_pop`.`delivery_vehicle` ;

CREATE TABLE IF NOT EXISTS `mom_and_pop`.`delivery_vehicle` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `make` VARCHAR(100) NOT NULL COMMENT 'Marca do veiculo',
  `model` VARCHAR(100) NOT NULL COMMENT 'Modelo do veiculo',
  `year_manufacture` VARCHAR(45) NOT NULL COMMENT 'Ano de fabricação do veiculo',
  `owner` TINYINT NOT NULL DEFAULT 1 COMMENT 'Indica se o motorista é o dono do veiculo ou se o veiculo é alugado',
  `vehicle_registration_number` VARCHAR(45) NULL COMMENT 'No Brasil utiliza-se o RENAVAM',
  `rental_company` VARCHAR(200) NULL COMMENT 'Caso seja alugado, este campo é para informar a empresa na qual ele foi alugado',
  `lease_agreement_url` VARCHAR(300) NULL COMMENT 'Local onde foi salvo o contrato de locação',
  `insurance_contracted` TINYINT NOT NULL DEFAULT 0 COMMENT 'Informa se o veiculo tem seguro',
  PRIMARY KEY (`id`))
ENGINE = InnoDB
COMMENT = 'Tabela para guardar informações do veiculo do entregador';

CREATE UNIQUE INDEX `idx_delivery_vehicle_id_unique` ON `mom_and_pop`.`delivery_vehicle` (`id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `mom_and_pop`.`delivery`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mom_and_pop`.`delivery` ;

CREATE TABLE IF NOT EXISTS `mom_and_pop`.`delivery` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `user_id` INT UNSIGNED NOT NULL COMMENT 'Fk da tabela user que é utilizado para que o entregador possa efetuar login',
  `weekly_working_time_id` INT UNSIGNED NOT NULL COMMENT 'Horario de trabalho do entregador',
  `address_location_id` BIGINT(20) UNSIGNED NOT NULL COMMENT 'Endereço do entregador',
  `reimbursement_method_id` INT UNSIGNED NOT NULL COMMENT 'Método de recebimento pelo serviço prestado.',
  `delivery_man_registration_id` INT UNSIGNED NOT NULL COMMENT 'Informações do entregador',
  `delivery_vehicle_id` INT UNSIGNED NOT NULL COMMENT 'Informações do veiculo do entregador',
  `name` VARCHAR(200) NOT NULL COMMENT 'Nome do Entregador',
  `type` VARCHAR(2) NOT NULL COMMENT 'Indica se o delivery que esta sendo cadastrado é pessoa física ou jurídica',
  `identifier` VARCHAR(22) NOT NULL COMMENT 'identificador do usuario ex CPF/CNPJ',
  `state_registration` VARCHAR(45) NULL COMMENT 'Inscrição estadual caso o entregador tenha se cadastrado como Pessoa Jurídica.',
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_delivery_user`
    FOREIGN KEY (`user_id`)
    REFERENCES `mom_and_pop`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_delivery_weekly_working_time`
    FOREIGN KEY (`weekly_working_time_id`)
    REFERENCES `mom_and_pop`.`weekly_working_time` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_delivery_address_location`
    FOREIGN KEY (`address_location_id`)
    REFERENCES `mom_and_pop`.`address_location` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_delivery_reimbursement_method`
    FOREIGN KEY (`reimbursement_method_id`)
    REFERENCES `mom_and_pop`.`reimbursement_method` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_delivery_delivery_man_registration`
    FOREIGN KEY (`delivery_man_registration_id`)
    REFERENCES `mom_and_pop`.`delivery_man_registration` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_delivery_delivery_vehicle`
    FOREIGN KEY (`delivery_vehicle_id`)
    REFERENCES `mom_and_pop`.`delivery_vehicle` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Guarda informações do usuário do tipo motorista que se cadastrou no nosso site';

CREATE UNIQUE INDEX `idx_delivery_id_unique` ON `mom_and_pop`.`delivery` (`id` ASC) VISIBLE;

CREATE INDEX `idx_fk_delivery_user` ON `mom_and_pop`.`delivery` (`user_id` ASC) VISIBLE;

CREATE INDEX `idx_fk_delivery_weekly_working_time` ON `mom_and_pop`.`delivery` (`weekly_working_time_id` ASC) VISIBLE;

CREATE INDEX `idx_fk_delivery_address_location` ON `mom_and_pop`.`delivery` (`address_location_id` ASC) VISIBLE;

CREATE INDEX `idx_fk_delivery_reimbursement_method` ON `mom_and_pop`.`delivery` (`reimbursement_method_id` ASC) VISIBLE;

CREATE INDEX `idx_fk_delivery_delivery_man_registration` ON `mom_and_pop`.`delivery` (`delivery_man_registration_id` ASC) VISIBLE;

CREATE INDEX `idx_fk_delivery_delivery_vehicle` ON `mom_and_pop`.`delivery` (`delivery_vehicle_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `mom_and_pop`.`params`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mom_and_pop`.`params` ;

CREATE TABLE IF NOT EXISTS `mom_and_pop`.`params` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Identificador da linha na tabela de parâmetro de sistema',
  `key` VARCHAR(100) NOT NULL COMMENT 'Chave para identificar o parâmetro inserido',
  `value` VARCHAR(500) NOT NULL COMMENT 'Valor do parâmetro de sistema',
  `description` VARCHAR(255) NULL COMMENT 'Descrição do registro na tabela de parâmetro de sistema',
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Data da criação do registro',
  PRIMARY KEY (`id`))
ENGINE = InnoDB
COMMENT = 'Tabela de parametro de sistemas';

CREATE UNIQUE INDEX `idx_params_id_unique` ON `mom_and_pop`.`params` (`id` ASC) VISIBLE;

CREATE UNIQUE INDEX `idx_params_key_unique` ON `mom_and_pop`.`params` (`key` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `mom_and_pop`.`payment_method`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mom_and_pop`.`payment_method` ;

CREATE TABLE IF NOT EXISTS `mom_and_pop`.`payment_method` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `client_id` INT UNSIGNED NOT NULL,
  `label` VARCHAR(45) NULL,
  `flag` VARCHAR(45) NOT NULL,
  `payers_name` VARCHAR(100) NOT NULL,
  `number` VARCHAR(16) NOT NULL,
  `due_date` VARCHAR(5) NOT NULL,
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_payment_method_client`
    FOREIGN KEY (`client_id`)
    REFERENCES `mom_and_pop`.`client` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE UNIQUE INDEX `idx_payment_method_id_unique` ON `mom_and_pop`.`payment_method` (`id` ASC) VISIBLE;

CREATE INDEX `idx_fk_payment_method_client` ON `mom_and_pop`.`payment_method` (`client_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `mom_and_pop`.`client_has_address_location`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mom_and_pop`.`client_has_address_location` ;

CREATE TABLE IF NOT EXISTS `mom_and_pop`.`client_has_address_location` (
  `client_id` INT UNSIGNED NOT NULL,
  `address_location_id` BIGINT(20) UNSIGNED NOT NULL,
  `label` VARCHAR(100) NULL,
  PRIMARY KEY (`client_id`, `address_location_id`),
  CONSTRAINT `fk_client_has_address_location_client`
    FOREIGN KEY (`client_id`)
    REFERENCES `mom_and_pop`.`client` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_client_has_address_location_address_location`
    FOREIGN KEY (`address_location_id`)
    REFERENCES `mom_and_pop`.`address_location` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `idx_fk_client_has_address_location_address_location` ON `mom_and_pop`.`client_has_address_location` (`address_location_id` ASC) VISIBLE;

CREATE INDEX `idx_fk_client_has_address_location_client` ON `mom_and_pop`.`client_has_address_location` (`client_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `mom_and_pop`.`profile`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mom_and_pop`.`profile` ;

CREATE TABLE IF NOT EXISTS `mom_and_pop`.`profile` (
  `id` BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Di auto increment do perfil',
  `market_id` INT UNSIGNED NOT NULL COMMENT 'Fk do mercado ao qual esse perfil esta associado',
  `name` VARCHAR(50) NOT NULL COMMENT 'Nome do perfil',
  `is_master` TINYINT NOT NULL DEFAULT 0 COMMENT 'Flag indicando se o usuário que esta associado a esse perfil tem permissão master',
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_proofile_market`
    FOREIGN KEY (`market_id`)
    REFERENCES `mom_and_pop`.`market` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Tabela de perfil do usuario que está associado ao supermercado';

CREATE UNIQUE INDEX `idx_profile_id_unique` ON `mom_and_pop`.`profile` (`id` ASC) VISIBLE;

CREATE INDEX `idx_fk_proofile_market` ON `mom_and_pop`.`profile` (`market_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `mom_and_pop`.`user_has_market`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mom_and_pop`.`user_has_market` ;

CREATE TABLE IF NOT EXISTS `mom_and_pop`.`user_has_market` (
  `user_id` INT UNSIGNED NOT NULL COMMENT 'Fk da tabela usuario',
  `market_id` INT UNSIGNED NOT NULL COMMENT 'Fk da tabela supermercado',
  `proofile_id` BIGINT(20) UNSIGNED NOT NULL COMMENT 'Perfil que o usuário cadastrado tem onde, define o nível de permissão que ele tem para executar uma alteração no supermercado',
  PRIMARY KEY (`user_id`, `market_id`),
  CONSTRAINT `fk_user_has_market_user`
    FOREIGN KEY (`user_id`)
    REFERENCES `mom_and_pop`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_user_has_market_market`
    FOREIGN KEY (`market_id`)
    REFERENCES `mom_and_pop`.`market` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_user_has_market_proofile`
    FOREIGN KEY (`proofile_id`)
    REFERENCES `mom_and_pop`.`profile` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Tabela responsável por associar o usuário ao supermercado.';

CREATE INDEX `idx_fk_user_has_market_market` ON `mom_and_pop`.`user_has_market` (`market_id` ASC) VISIBLE;

CREATE INDEX `idx_fk_user_has_market_user` ON `mom_and_pop`.`user_has_market` (`user_id` ASC) VISIBLE;

CREATE INDEX `idx_fk_user_has_market_proofile` ON `mom_and_pop`.`user_has_market` (`proofile_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `mom_and_pop`.`authorization_code`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mom_and_pop`.`authorization_code` ;

CREATE TABLE IF NOT EXISTS `mom_and_pop`.`authorization_code` (
  `authorization_code` VARCHAR(255) NOT NULL,
  `expires_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `redirect_uri` VARCHAR(900) NOT NULL,
  `user_id` INT UNSIGNED NOT NULL,
  `oauth_client_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`authorization_code`),
  CONSTRAINT `fk_authorization_code_user`
    FOREIGN KEY (`user_id`)
    REFERENCES `mom_and_pop`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_authorization_code_oauth_client`
    FOREIGN KEY (`oauth_client_id`)
    REFERENCES `mom_and_pop`.`oauth_client` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `idx_fk_authorization_code_user` ON `mom_and_pop`.`authorization_code` (`user_id` ASC) VISIBLE;

CREATE INDEX `idx_fk_authorization_code_oauth_client` ON `mom_and_pop`.`authorization_code` (`oauth_client_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `mom_and_pop`.`product`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mom_and_pop`.`product` ;

CREATE TABLE IF NOT EXISTS `mom_and_pop`.`product` (
  `id` INT(14) UNSIGNED ZEROFILL NOT NULL COMMENT 'Será o Código GTIN Trazido do GS1',
  `brand` VARCHAR(150) NULL COMMENT 'Marca do Produto',
  `gtin_type` VARCHAR(20) NULL COMMENT 'Tipo do GTIN',
  `product_description` VARCHAR(255) NULL COMMENT 'Descrição do Produto',
  `segment` VARCHAR(255) NULL COMMENT 'Segmento do Produto',
  `family` VARCHAR(255) NULL COMMENT 'Familia do Produto',
  `product_class` VARCHAR(255) NULL COMMENT 'Classe do produto',
  `product_sub_class` VARCHAR(255) NULL COMMENT 'Sub Classe do produto',
  `product_block` VARCHAR(255) NULL COMMENT 'Bloco do Produto',
  `country_code` VARCHAR(4) NULL COMMENT 'Código do pais aonde o produto é destinado',
  `image_url` VARCHAR(500) NULL COMMENT 'Url da imagem',
  `cest` INT NULL COMMENT 'Código Especificador da Substituição Tributária',
  `ncm` INT NULL COMMENT 'Nomenclatura Comum do Mercosul',
  `gross_weight` DECIMAL(11,2) NULL COMMENT 'Peso bruto do produto',
  `gross_weight_unit_measurement` VARCHAR(15) NULL COMMENT 'Unidade de medida do peso bruto',
  `lower_level_gtin` INT NULL COMMENT 'GTIN de nível inferior',
  `qty_items_contained` INT NULL COMMENT 'Quantidade de item contidos no produto',
  `width` DECIMAL(10,2) NULL COMMENT 'Largura do produto',
  `height` DECIMAL(10,2) NULL COMMENT 'Altura do produto',
  `depth` DECIMAL(10,2) NULL COMMENT 'Profundidade do produto',
  `due_date` INT NULL COMMENT 'Data de validade do produto em dias. Ex: 15, 30, 90, 120 (dias)',
  PRIMARY KEY (`id`))
ENGINE = InnoDB
COMMENT = 'Tabela de Produtos sincronizada com a base do GS1';

CREATE UNIQUE INDEX `id_UNIQUE` ON `mom_and_pop`.`product` (`id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `mom_and_pop`.`market_has_product`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mom_and_pop`.`market_has_product` ;

CREATE TABLE IF NOT EXISTS `mom_and_pop`.`market_has_product` (
  `market_id` INT UNSIGNED NOT NULL COMMENT 'Fk do produto que é sincronizado com a base do GS1',
  `product_id` INT UNSIGNED ZEROFILL NOT NULL COMMENT 'Fk do supermercado',
  `unit_price` DECIMAL(11,2) NOT NULL COMMENT 'Valor unitário do produto',
  `promotional_value` DECIMAL(11,2) NULL COMMENT 'Valor promocional do produto',
  `end_date_promotion` DATETIME NULL COMMENT 'Data fim do valor promocional inserido',
  `quantity` INT ZEROFILL NOT NULL DEFAULT 0 COMMENT 'Quantidade de produtos que o supermercado possui em estoque',
  PRIMARY KEY (`market_id`, `product_id`),
  CONSTRAINT `fk_market_has_product_market`
    FOREIGN KEY (`market_id`)
    REFERENCES `mom_and_pop`.`market` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_market_has_product_product`
    FOREIGN KEY (`product_id`)
    REFERENCES `mom_and_pop`.`product` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Tabela responsável por vincular o produto que vem da base do GS1 com o mercado';

CREATE INDEX `idx_fk_market_has_product_product` ON `mom_and_pop`.`market_has_product` (`product_id` ASC) VISIBLE;

CREATE INDEX `idx_fk_market_has_product_market` ON `mom_and_pop`.`market_has_product` (`market_id` ASC) VISIBLE;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
